// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// getLDPrefix
List getLDPrefix(std::string mldm);
RcppExport SEXP _SBayesRC_getLDPrefix(SEXP mldmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type mldm(mldmSEXP);
    rcpp_result_gen = Rcpp::wrap(getLDPrefix(mldm));
    return rcpp_result_gen;
END_RCPP
}
// getPseudoRand
SEXP getPseudoRand(std::string tempstr, int type, int m, Rcpp::NumericVector blocks, Rcpp::NumericVector startPos, double thresh, Eigen::Map<Eigen::VectorXd> rand);
RcppExport SEXP _SBayesRC_getPseudoRand(SEXP tempstrSEXP, SEXP typeSEXP, SEXP mSEXP, SEXP blocksSEXP, SEXP startPosSEXP, SEXP threshSEXP, SEXP randSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type tempstr(tempstrSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type blocks(blocksSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type startPos(startPosSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type rand(randSEXP);
    rcpp_result_gen = Rcpp::wrap(getPseudoRand(tempstr, type, m, blocks, startPos, thresh, rand));
    return rcpp_result_gen;
END_RCPP
}
// cutLDc
bool cutLDc(std::string tempstr, int type, Rcpp::NumericVector blocks, std::string outDir, double cutThresh);
RcppExport SEXP _SBayesRC_cutLDc(SEXP tempstrSEXP, SEXP typeSEXP, SEXP blocksSEXP, SEXP outDirSEXP, SEXP cutThreshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type tempstr(tempstrSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type blocks(blocksSEXP);
    Rcpp::traits::input_parameter< std::string >::type outDir(outDirSEXP);
    Rcpp::traits::input_parameter< double >::type cutThresh(cutThreshSEXP);
    rcpp_result_gen = Rcpp::wrap(cutLDc(tempstr, type, blocks, outDir, cutThresh));
    return rcpp_result_gen;
END_RCPP
}
// impGa
NumericVector impGa(std::string tempstr, int curBlock, int type, Eigen::Map<Eigen::VectorXd> z, Eigen::Map<Eigen::VectorXi> typedIndex, int m, double cutThresh, double diag_mod);
RcppExport SEXP _SBayesRC_impGa(SEXP tempstrSEXP, SEXP curBlockSEXP, SEXP typeSEXP, SEXP zSEXP, SEXP typedIndexSEXP, SEXP mSEXP, SEXP cutThreshSEXP, SEXP diag_modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type tempstr(tempstrSEXP);
    Rcpp::traits::input_parameter< int >::type curBlock(curBlockSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type z(zSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXi> >::type typedIndex(typedIndexSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type cutThresh(cutThreshSEXP);
    Rcpp::traits::input_parameter< double >::type diag_mod(diag_modSEXP);
    rcpp_result_gen = Rcpp::wrap(impGa(tempstr, curBlock, type, z, typedIndex, m, cutThresh, diag_mod));
    return rcpp_result_gen;
END_RCPP
}
// sbayesr_eigen_joint_annot
List sbayesr_eigen_joint_annot(int niter, int burn, Eigen::Map<Eigen::VectorXd> bhat, int numAnno, Rcpp::StringVector annoStrs, std::string mldmDir, double vary, Eigen::Map<Eigen::VectorXd> blkN, Eigen::Map<Eigen::VectorXd> cgamma, Eigen::Map<Eigen::VectorXd> startPi, Rcpp::IntegerVector rmSNPIndices, double starth2, double cutThresh, bool bOrigin, std::string outPrefix, std::string samVe, double resam_thresh, bool bOutDetail, int outFreq, double initAnnoSS, bool bOutBeta);
RcppExport SEXP _SBayesRC_sbayesr_eigen_joint_annot(SEXP niterSEXP, SEXP burnSEXP, SEXP bhatSEXP, SEXP numAnnoSEXP, SEXP annoStrsSEXP, SEXP mldmDirSEXP, SEXP varySEXP, SEXP blkNSEXP, SEXP cgammaSEXP, SEXP startPiSEXP, SEXP rmSNPIndicesSEXP, SEXP starth2SEXP, SEXP cutThreshSEXP, SEXP bOriginSEXP, SEXP outPrefixSEXP, SEXP samVeSEXP, SEXP resam_threshSEXP, SEXP bOutDetailSEXP, SEXP outFreqSEXP, SEXP initAnnoSSSEXP, SEXP bOutBetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type bhat(bhatSEXP);
    Rcpp::traits::input_parameter< int >::type numAnno(numAnnoSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type annoStrs(annoStrsSEXP);
    Rcpp::traits::input_parameter< std::string >::type mldmDir(mldmDirSEXP);
    Rcpp::traits::input_parameter< double >::type vary(varySEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type blkN(blkNSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type cgamma(cgammaSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type startPi(startPiSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rmSNPIndices(rmSNPIndicesSEXP);
    Rcpp::traits::input_parameter< double >::type starth2(starth2SEXP);
    Rcpp::traits::input_parameter< double >::type cutThresh(cutThreshSEXP);
    Rcpp::traits::input_parameter< bool >::type bOrigin(bOriginSEXP);
    Rcpp::traits::input_parameter< std::string >::type outPrefix(outPrefixSEXP);
    Rcpp::traits::input_parameter< std::string >::type samVe(samVeSEXP);
    Rcpp::traits::input_parameter< double >::type resam_thresh(resam_threshSEXP);
    Rcpp::traits::input_parameter< bool >::type bOutDetail(bOutDetailSEXP);
    Rcpp::traits::input_parameter< int >::type outFreq(outFreqSEXP);
    Rcpp::traits::input_parameter< double >::type initAnnoSS(initAnnoSSSEXP);
    Rcpp::traits::input_parameter< bool >::type bOutBeta(bOutBetaSEXP);
    rcpp_result_gen = Rcpp::wrap(sbayesr_eigen_joint_annot(niter, burn, bhat, numAnno, annoStrs, mldmDir, vary, blkN, cgamma, startPi, rmSNPIndices, starth2, cutThresh, bOrigin, outPrefix, samVe, resam_thresh, bOutDetail, outFreq, initAnnoSS, bOutBeta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SBayesRC_getLDPrefix", (DL_FUNC) &_SBayesRC_getLDPrefix, 1},
    {"_SBayesRC_getPseudoRand", (DL_FUNC) &_SBayesRC_getPseudoRand, 7},
    {"_SBayesRC_cutLDc", (DL_FUNC) &_SBayesRC_cutLDc, 5},
    {"_SBayesRC_impGa", (DL_FUNC) &_SBayesRC_impGa, 8},
    {"_SBayesRC_sbayesr_eigen_joint_annot", (DL_FUNC) &_SBayesRC_sbayesr_eigen_joint_annot, 21},
    {NULL, NULL, 0}
};

RcppExport void R_init_SBayesRC(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
